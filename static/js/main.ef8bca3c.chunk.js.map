{"version":3,"sources":["../node_modules/graphql-language-service-interface/dist sync /^.*$","schema.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ChangeSchemaForm","onChangeSchema","useState","createSchemaState","setCreateSchemaState","submitRef","useRef","className","onSubmitCapture","preventDefault","url","createSchemaFromSwagger","swaggerSchema","callBackend","requestOptions","method","body","baseUrl","path","query","headers","bodyType","hasBody","length","fetch","URLSearchParams","JSON","stringify","undefined","response","text","status","parse","createSchema","currentTarget","value","then","schema","error","name","placeholder","type","hidden","ref","onClick","current","click","title","label","message","App","schemaState","setSchema","graphiqlRef","fetcher","variables","graphql","Toolbar","handlePrettifyQuery","handleMergeQuery","handleCopyQuery","handleToggleHistory","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+HAAA,IAAIA,EAAM,CACT,IAAK,GACL,KAAM,GACN,2BAA4B,IAC5B,8BAA+B,IAC/B,mCAAoC,IACpC,sBAAuB,GACvB,yBAA0B,GAC1B,8BAA+B,IAC/B,+BAAgC,GAChC,kCAAmC,GACnC,uCAAwC,IACxC,kBAAmB,GACnB,qBAAsB,GACtB,0BAA2B,IAC3B,mBAAoB,GACpB,sBAAuB,GACvB,2BAA4B,IAC5B,wBAAyB,GACzB,2BAA4B,GAC5B,gCAAiC,IACjC,eAAgB,IAChB,kBAAmB,IACnB,uBAAwB,IACxB,UAAW,GACX,aAAc,GACd,kBAAmB,KAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,42BCzCb,ICADY,EAAmB,SAAC,GAInB,IAHLC,EAGI,EAHJA,eAGI,EAC8CC,mBAEhD,WAHE,mBACGC,EADH,KACsBC,EADtB,KAIEC,EAAYC,iBAAgC,MAClD,OACE,0BACEC,UAAU,mBACVC,gBAAiB,SAAAhB,GACfA,EAAEiB,iBACFL,EAAqB,WDdD,SAACM,GAAD,OAC1BC,uBAAwB,CACtBC,cAAeF,EACTG,YAFgB,yJAGpBC,eAAkBC,EAHE,EAGFA,OAAQC,EAHN,EAGMA,KAAMC,EAHZ,EAGYA,QAASC,EAHrB,EAGqBA,KAAMC,EAH3B,EAG2BA,MAAOC,EAHlC,EAGkCA,QAASC,EAH3C,EAG2CA,SAEzDC,EAAU1B,OAAOD,KAAKqB,GAAMO,OAAS,EALvB,SAMGC,MAAM,uCAAD,OACaP,GADb,OACuBC,EADvB,YAC+B,IAAIO,gBAE3DN,IAHwB,GAMxBJ,UACiB,SAAbM,GAAuB,CACzBD,QAAQ,EAAD,CACL,eAAgB,oBACbA,GAELJ,KAAMM,EAAUI,KAAKC,UAAUX,QAAQY,GAZjB,GAcP,aAAbP,GAA2B,CAC7BD,QAASA,EACTJ,KAAMM,EAAU,IAAIG,gBAAgBT,QAAQY,KAtB9B,cAMdC,EANc,gBA2BDA,EAASC,OA3BR,UA2BdA,EA3Bc,SA4BhB,KAAOD,EAASE,QAAUF,EAASE,OAAS,KA5B5B,mDA8BTL,KAAKM,MAAMF,IA9BF,2DAgCTA,GAhCS,cAmCd,IAAIrC,MAAJ,oBAAuBoC,EAASE,OAAhC,cAA4CD,IAnC9B,gHCelBG,CADoBzC,EAAE0C,cAAcxB,IAAIyB,OACtBC,KAChB,SAACC,GACCjC,EAAqB,WACrBH,EAAeoC,IAEjB,SAACC,GAAD,OAAkBlC,EAAqBkC,OAI3C,2BACEC,KAAK,MACLhC,UAAU,WACViC,YAAa,wCAEf,2BAAOC,KAAK,SAASC,QAAM,EAACC,IAAKtC,IAEjC,kBAAC,gBAAD,CACEuC,QAAS,WACPvC,EAAUwC,SAAWxC,EAAUwC,QAAQC,SAEzCC,MAAO,gEACPC,MACwB,YAAtB7C,EAAkC,mBAAqB,kBAI1DA,aAA6BV,OAC5B,0BAAMc,UAAU,yBAAhB,iBAAmDJ,EAAkB8C,YA8D9DC,EAxDO,WAAO,IAAD,EACOhD,mBAA+B,MADtC,mBACnBiD,EADmB,KACNC,EADM,KAGpBC,EAAc/C,mBAEpB,OACE,kBAAC,IAAD,CACEqC,IAAKU,EACLhB,OAAQc,EACRG,QAAS,YAMF,IALLnC,EAKI,EALJA,MACAoC,EAII,EAJJA,UAKA,GAAIJ,EACF,OAAOK,YAAQL,EAAahC,EAAOoC,KAIvC,kBAAC,IAASE,QAAV,KACE,kBAAC,EAAD,CAAkBxD,eAAgBmD,IAClC,kBAAC,gBAAD,CACER,QAAS,WACPS,EAAYR,QAAQa,uBAEtBX,MAAM,gCACNC,MAAM,aAER,kBAAC,gBAAD,CACEJ,QAAS,WACPS,EAAYR,QAAQc,oBAEtBZ,MAAM,6BACNC,MAAM,UAER,kBAAC,gBAAD,CACEJ,QAAS,WACPS,EAAYR,QAAQe,mBAEtBb,MAAM,4BACNC,MAAM,SAER,kBAAC,gBAAD,CACEJ,QAAS,WACPS,EAAYR,QAAQgB,uBAEtBd,MAAM,eACNC,MAAM,eC5FIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.ef8bca3c.chunk.js","sourcesContent":["var map = {\n\t\".\": 58,\n\t\"./\": 58,\n\t\"./GraphQLLanguageService\": 108,\n\t\"./GraphQLLanguageService.js\": 108,\n\t\"./GraphQLLanguageService.js.flow\": 275,\n\t\"./autocompleteUtils\": 81,\n\t\"./autocompleteUtils.js\": 81,\n\t\"./autocompleteUtils.js.flow\": 276,\n\t\"./getAutocompleteSuggestions\": 68,\n\t\"./getAutocompleteSuggestions.js\": 68,\n\t\"./getAutocompleteSuggestions.js.flow\": 277,\n\t\"./getDefinition\": 82,\n\t\"./getDefinition.js\": 82,\n\t\"./getDefinition.js.flow\": 278,\n\t\"./getDiagnostics\": 84,\n\t\"./getDiagnostics.js\": 84,\n\t\"./getDiagnostics.js.flow\": 279,\n\t\"./getHoverInformation\": 85,\n\t\"./getHoverInformation.js\": 85,\n\t\"./getHoverInformation.js.flow\": 280,\n\t\"./getOutline\": 107,\n\t\"./getOutline.js\": 107,\n\t\"./getOutline.js.flow\": 281,\n\t\"./index\": 58,\n\t\"./index.js\": 58,\n\t\"./index.js.flow\": 282\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 147;","import {\n  createSchema as createSchemaFromSwagger,\n  CallBackendArguments\n} from 'swagger-to-graphql';\n\n// @ts-ignore\nexport const createSchema = (url: string) =>\n  createSchemaFromSwagger({\n    swaggerSchema: url,\n    async callBackend({\n      requestOptions: { method, body, baseUrl, path, query, headers, bodyType }\n    }: CallBackendArguments<{}>) {\n      const hasBody = Object.keys(body).length > 0;\n      const response = await fetch(\n        `https://cors-anywhere.herokuapp.com/${baseUrl}${path}?${new URLSearchParams(\n          // TODO: deal with query parameters\n          query as Record<string, string>\n        )}`,\n        {\n          method,\n          ...(bodyType === 'json' && {\n            headers: {\n              'Content-Type': 'application/json',\n              ...headers\n            },\n            body: hasBody ? JSON.stringify(body) : undefined\n          }),\n          ...(bodyType === 'formData' && {\n            headers: headers,\n            body: hasBody ? new URLSearchParams(body) : undefined\n          })\n        }\n      );\n\n      const text = await response.text();\n      if (200 <= response.status && response.status < 300) {\n        try {\n          return JSON.parse(text);\n        } catch (e) {\n          return text;\n        }\n      }\n      throw new Error(`Response: ${response.status} - ${text}`);\n    }\n  });\n","import React, { useRef, useState } from 'react';\nimport GraphiQL, { ToolbarButton } from 'graphiql';\nimport { graphql, GraphQLSchema } from 'graphql';\nimport { createSchema } from './schema';\nimport './App.css';\n\nconst ChangeSchemaForm = ({\n  onChangeSchema\n}: {\n  onChangeSchema: (schema: GraphQLSchema) => void;\n}) => {\n  const [createSchemaState, setCreateSchemaState] = useState<\n    'initial' | 'loading' | Error\n  >('initial');\n  const submitRef = useRef<HTMLInputElement | null>(null);\n  return (\n    <form\n      className=\"changeSchemaForm\"\n      onSubmitCapture={e => {\n        e.preventDefault();\n        setCreateSchemaState('loading');\n        const url: string = e.currentTarget.url.value;\n        createSchema(url).then(\n          (schema: GraphQLSchema) => {\n            setCreateSchemaState('initial');\n            onChangeSchema(schema);\n          },\n          (error: Error) => setCreateSchemaState(error)\n        );\n      }}\n    >\n      <input\n        name=\"url\"\n        className=\"urlInput\"\n        placeholder={'Paste a swagger/openapi url here...'}\n      />\n      <input type=\"submit\" hidden ref={submitRef} />\n\n      <ToolbarButton\n        onClick={() => {\n          submitRef.current && submitRef.current.click();\n        }}\n        title={'Fetches the Swagger/OpenAPI schema and converts it to GraphQL'}\n        label={\n          createSchemaState === 'loading' ? 'Update schema...' : 'Update schema'\n        }\n      />\n\n      {createSchemaState instanceof Error && (\n        <span className=\"changeSchemaFormError\">{`Error: ${createSchemaState.message}`}</span>\n      )}\n    </form>\n  );\n};\n\nconst App: React.FC = () => {\n  const [schemaState, setSchema] = useState<null | GraphQLSchema>(null);\n\n  const graphiqlRef = useRef<any>();\n\n  return (\n    <GraphiQL\n      ref={graphiqlRef}\n      schema={schemaState}\n      fetcher={({\n        query,\n        variables\n      }: {\n        query: string;\n        variables: { [key: string]: any };\n      }) => {\n        if (schemaState) {\n          return graphql(schemaState, query, variables);\n        }\n      }}\n    >\n      <GraphiQL.Toolbar>\n        <ChangeSchemaForm onChangeSchema={setSchema} />\n        <ToolbarButton\n          onClick={() => {\n            graphiqlRef.current.handlePrettifyQuery();\n          }}\n          title=\"Prettify Query (Shift-Ctrl-P)\"\n          label=\"Prettify\"\n        />\n        <ToolbarButton\n          onClick={() => {\n            graphiqlRef.current.handleMergeQuery();\n          }}\n          title=\"Merge Query (Shift-Ctrl-M)\"\n          label=\"Merge\"\n        />\n        <ToolbarButton\n          onClick={() => {\n            graphiqlRef.current.handleCopyQuery();\n          }}\n          title=\"Copy Query (Shift-Ctrl-C)\"\n          label=\"Copy\"\n        />\n        <ToolbarButton\n          onClick={() => {\n            graphiqlRef.current.handleToggleHistory();\n          }}\n          title=\"Show History\"\n          label=\"History\"\n        />\n      </GraphiQL.Toolbar>\n    </GraphiQL>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"graphiql/graphiql.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}